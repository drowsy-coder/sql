-- Task 1: Create the Employee table
CREATE TABLE Employee (
    Ename VARCHAR2(100),
    Eid VARCHAR2(20),
    Designation VARCHAR2(50),
    BasicPay NUMBER,
    HRA NUMBER,
    DA NUMBER,
    GrossPay NUMBER
);

-- Task 2: PL/SQL Procedure to insert records in the Employee table except GrossPay
CREATE OR REPLACE PROCEDURE InsertEmployee (
    p_Ename VARCHAR2,
    p_Eid VARCHAR2,
    p_Designation VARCHAR2,
    p_BasicPay NUMBER,
    p_HRA NUMBER,
    p_DA NUMBER
) AS
BEGIN
    INSERT INTO Employee (Ename, Eid, Designation, BasicPay, HRA, DA)
    VALUES (p_Ename, p_Eid, p_Designation, p_BasicPay, p_HRA, p_DA);
    COMMIT;
END;
/

-- Task 3: PL/SQL Procedure to update the GrossPay in Employee table
CREATE OR REPLACE PROCEDURE UpdateGrossPay AS
BEGIN
    UPDATE Employee
    SET GrossPay = BasicPay + HRA + DA;
    COMMIT;
END;
/

-- Task 4: PL/SQL Procedure (ProcDel) to delete the employee working as Clerk
CREATE OR REPLACE PROCEDURE ProcDel AS
BEGIN
    DELETE FROM Employee WHERE Designation = 'Clerk';
    COMMIT;
END;
/

-- Task 5: Remove the procedure ProcDel
DROP PROCEDURE ProcDel;

-- Task 6: PL/SQL function (FunSmall) to find smallest of three numbers
CREATE OR REPLACE FUNCTION FunSmall(num1 NUMBER, num2 NUMBER, num3 NUMBER) RETURN NUMBER IS
BEGIN
    IF num1 < num2 AND num1 < num3 THEN
        RETURN num1;
    ELSIF num2 < num3 THEN
        RETURN num2;
    ELSE
        RETURN num3;
    END IF;
END;
/

-- Task 7: PL/SQL function to compute grade
CREATE OR REPLACE FUNCTION ComputeGrade(mark NUMBER) RETURN CHAR IS
BEGIN
    IF mark BETWEEN 91 AND 100 THEN
        RETURN 'S';
    ELSIF mark BETWEEN 81 AND 90 THEN
        RETURN 'A';
    ELSIF mark BETWEEN 71 AND 80 THEN
        RETURN 'B';
    ELSIF mark BETWEEN 61 AND 70 THEN
        RETURN 'C';
    ELSIF mark BETWEEN 55 AND 60 THEN
        RETURN 'D';
    ELSIF mark BETWEEN 50 AND 54 THEN
        RETURN 'E';
    ELSE
        RETURN 'Fail';
    END IF;
END;
/

-- Task 8: PL/SQL function to find whether the given number is an Armstrong number
CREATE OR REPLACE FUNCTION IsArmstrong(num NUMBER) RETURN BOOLEAN IS
    temp NUMBER := num;
    sum NUMBER := 0;
    digit NUMBER;
BEGIN
    WHILE temp > 0 LOOP
        digit := MOD(temp, 10);
        sum := sum + digit * digit * digit;
        temp := TRUNC(temp / 10);
    END LOOP;
    RETURN sum = num;
END;
/

-- Task 9: Remove the function FunSmall
DROP FUNCTION FunSmall;
