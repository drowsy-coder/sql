-- Task 1: PL/SQL program to find the greatest of three numbers
DECLARE
    num1 NUMBER := 10;
    num2 NUMBER := 20;
    num3 NUMBER := 15;
    greatest NUMBER;
BEGIN
    IF num1 >= num2 AND num1 >= num3 THEN
        greatest := num1;
    ELSIF num2 >= num1 AND num2 >= num3 THEN
        greatest := num2;
    ELSE
        greatest := num3;
    END IF;
    DBMS_OUTPUT.PUT_LINE('Greatest number is: ' || greatest);
END;
/

-- Task 2: PL/SQL program for debit card points calculation
DECLARE
    purchase_amount NUMBER := 25000;
    points NUMBER;
BEGIN
    IF purchase_amount < 0 THEN
        DBMS_OUTPUT.PUT_LINE('Invalid Inputs');
    ELSIF purchase_amount < 5000 THEN
        points := 0;
    ELSIF purchase_amount < 10000 THEN
        points := 50;
    ELSIF purchase_amount < 25000 THEN
        points := 100;
    ELSE
        points := 250;
    END IF;
    DBMS_OUTPUT.PUT_LINE('Wallet points: ' || points);
END;
/

-- Task 3: PL/SQL program for EB Bill calculation
DECLARE
    units NUMBER := 350;
    pay NUMBER;
BEGIN
    IF units <= 100 THEN
        pay := units * 1;
    ELSIF units <= 200 THEN
        pay := 100 * 1 + (units - 100) * 2;
    ELSIF units <= 300 THEN
        pay := 100 * 1 + 100 * 2 + (units - 200) * 3;
    ELSE
        pay := 100 * 1 + 100 * 2 + 100 * 3 + (units - 300) * 5;
    END IF;
    DBMS_OUTPUT.PUT_LINE('Total EB Bill: Rs. ' || pay);
END;
/

-- Task 4: PL/SQL program for Income Tax calculation
DECLARE
    income NUMBER := 700000;
    tax NUMBER;
BEGIN
    IF income <= 300000 THEN
        tax := 0;
    ELSIF income <= 600000 THEN
        tax := (income - 300000) * 0.05;
    ELSIF income <= 900000 THEN
        tax := 15000 + (income - 600000) * 0.10;
    ELSIF income <= 1200000 THEN
        tax := 45000 + (income - 900000) * 0.15;
    ELSIF income <= 1500000 THEN
        tax := 90000 + (income - 1200000) * 0.20;
    ELSE
        tax := 150000 + (income - 1500000) * 0.30;
    END IF;
    DBMS_OUTPUT.PUT_LINE('Income tax to be paid: Rs. ' || tax);
END;
/

-- Task 5: PL/SQL program to find sum of numbers divisible by 3 from 1 to 100
DECLARE
    sum_div3 NUMBER := 0;
    i NUMBER;
BEGIN
    FOR i IN 1..100 LOOP
        IF MOD(i, 3) = 0 THEN
            sum_div3 := sum_div3 + i;
        END IF;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('Sum of numbers divisible by 3 from 1 to 100: ' || sum_div3);
END;
/

-- Task 6: PL/SQL program to find sum of Armstrong numbers between 1 and 100
DECLARE
    sum_armstrong NUMBER := 0;
    num NUMBER;
    rem NUMBER;
    result NUMBER;
BEGIN
    FOR num IN 1..100 LOOP
        result := 0;
        DECLARE
            temp NUMBER := num;
        BEGIN
            LOOP
                rem := MOD(temp, 10);
                result := result + rem * rem * rem;
                temp := TRUNC(temp / 10);
                EXIT WHEN temp = 0;
            END LOOP;
        END;
        IF num = result THEN
            sum_armstrong := sum_armstrong + num;
        END IF;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('Sum of Armstrong numbers between 1 and 100: ' || sum_armstrong);
END;
/

-- Task 7: PL/SQL program to display Fibonacci series using For loop
DECLARE
    fib1 NUMBER := 0;
    fib2 NUMBER := 1;
    fib_next NUMBER;
    n NUMBER := 10; -- Number of terms in Fibonacci series
BEGIN
    DBMS_OUTPUT.PUT_LINE('Fibonacci series:');
    DBMS_OUTPUT.PUT_LINE(fib1);
    DBMS_OUTPUT.PUT_LINE(fib2);
    FOR i IN 3..n LOOP
        fib_next := fib1 + fib2;
        DBMS_OUTPUT.PUT_LINE(fib_next);
        fib1 := fib2;
        fib2 := fib_next;
    END LOOP;
END;
/
